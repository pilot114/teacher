{"version":3,"file":"js/352.ea251d73.js","mappings":"YACAA,KAAKC,cAAc,4DAEnB,IAAIC,EAAsB,WAEtBF,KAAKG,cAAgBC,cAErBJ,KAAKG,QAAQE,UAAU,CACnBC,SAAS,EACTC,MAAQC,IACJ,MAAMC,EAAU,IAAIC,YAAY,SAC1BC,EAASF,EAAQG,OAAOJ,GAC9BR,KAAKa,YAAY,CAAEC,KAAM,SAAUH,UAAS,IAGpDX,KAAKG,QAAQY,UAAU,CACnBT,SAAS,EACTC,MAAQC,IACJ,MAAMC,EAAU,IAAIC,YAAY,SAC1BM,EAAQP,EAAQG,OAAOJ,GAC7BR,KAAKa,YAAY,CAAEC,KAAM,SAAUE,SAAQ,GAGtD,EApByB,GAsB1BhB,KAAKiB,UAAYC,gBACPhB,EAEN,IACI,MAAMS,QAAeX,KAAKG,QAAQgB,eAAeC,EAAMZ,MACvDR,KAAKa,YAAY,CAAEC,KAAM,SAAUH,UACvC,CAAE,MAAOK,GACLhB,KAAKa,YAAY,CAAEC,KAAM,QAASE,MAAOA,EAAMK,SACnD,E","sources":["webpack://topics/./src/executor/pyWorker.js"],"sourcesContent":["// pyodideWorker.js\nself.importScripts('https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js');\n\nlet pyodideReadyPromise = (async () => {\n    /* global loadPyodide */\n    self.pyodide = await loadPyodide();\n\n    self.pyodide.setStdout({\n        batched: false,\n        write: (data) => {\n            const decoder = new TextDecoder('utf-8');\n            const result = decoder.decode(data);\n            self.postMessage({ type: 'stdout', result });\n        }\n    });\n    self.pyodide.setStderr({\n        batched: false,\n        write: (data) => {\n            const decoder = new TextDecoder('utf-8');\n            const error = decoder.decode(data);\n            self.postMessage({ type: 'stderr', error });\n        }\n    });\n})();\n\nself.onmessage = async (event) => {\n    await pyodideReadyPromise;\n\n    try {\n        const result = await self.pyodide.runPythonAsync(event.data);\n        self.postMessage({ type: 'result', result });\n    } catch (error) {\n        self.postMessage({ type: 'error', error: error.message });\n    }\n};\n"],"names":["self","importScripts","pyodideReadyPromise","pyodide","loadPyodide","setStdout","batched","write","data","decoder","TextDecoder","result","decode","postMessage","type","setStderr","error","onmessage","async","runPythonAsync","event","message"],"sourceRoot":""}